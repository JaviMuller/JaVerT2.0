var key__instr_symb_str_0 = symb_string(key__instr_symb_str_0);
Assume(not(key__instr_symb_str_0 = "valueOf"));
Assume(not(key__instr_symb_str_0 = "toString"));
Assume(not(key__instr_symb_str_0 = "hasOwnProperty"));
Assume(not(key__instr_symb_str_0 = "constructor"));
var subKey__instr_symb_str_1 = symb_string(subKey__instr_symb_str_1);
Assume(not(subKey__instr_symb_str_1 = "valueOf"));
Assume(not(subKey__instr_symb_str_1 = "toString"));
Assume(not(subKey__instr_symb_str_1 = "hasOwnProperty"));
Assume(not(subKey__instr_symb_str_1 = "constructor"));
var subSubKey__instr_symb_str_2 = symb_string(subSubKey__instr_symb_str_2);
Assume(not(subSubKey__instr_symb_str_2 = "valueOf"));
Assume(not(subSubKey__instr_symb_str_2 = "toString"));
Assume(not(subSubKey__instr_symb_str_2 = "hasOwnProperty"));
Assume(not(subSubKey__instr_symb_str_2 = "constructor"));
var subSubSubKey__instr_symb_str_3 = symb_string(subSubSubKey__instr_symb_str_3);
Assume(not(subSubSubKey__instr_symb_str_3 = "valueOf"));
Assume(not(subSubSubKey__instr_symb_str_3 = "toString"));
Assume(not(subSubSubKey__instr_symb_str_3 = "hasOwnProperty"));
Assume(not(subSubSubKey__instr_symb_str_3 = "constructor"));
var value__instr_symb_0 = symb(value__instr_symb_0);

const f = function (key, subKey, subSubKey, subSubSubKey, value) {
	const v1 = { morse: '.__.' };
	const v2 = { letter: v1 };
	const v3 = { first: v2 };
	let customer = {};
	customer.name = v3;
	customer.role = 'user';
	const v4 = customer[key];
	const v5 = v4[subKey];
	const v6 = v5[subSubKey];
	v6[subSubSubKey] = value;
	const v7 = console.log;
	const v8 = customer.name;
	const v9 = v8.first;
	const v10 = v9.letter;
	const v11 = v10.morse;
	const instr_test_0 = !is_symbolic('customer.name.first.letter.morse => ' + v11);
	Assert(instr_test_0);
	const v12 = v7('customer.name.first.letter.morse => ' + v11);
	v12;
	const v13 = console.log;
	const v14 = customer.name;
	const v15 = v14.first;
	const v16 = v15.letter;
	const v17 = v16.toString;
	const v18 = v17();
	const instr_test_1 = !is_symbolic('toString implementation => ' + v18);
	Assert(instr_test_1);
	const v19 = v13('toString implementation => ' + v18);
	v19;
	return customer;
};

f(key__instr_symb_str_0, subKey__instr_symb_str_1, subSubKey__instr_symb_str_2, subSubSubKey__instr_symb_str_3, value__instr_symb_0);
